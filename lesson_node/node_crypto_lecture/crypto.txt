Криптография - от древнегреческого скрытое или секретная писанина. Наука о методах обеспечения конфиденциальности,
целостности данных, аутентификации(проверка подлинности авторства), шифрования(кодировка данных).
Шифрования информации — обратимое преобразования открытого (исходного) текста на основе секретного алгоритма
или ключа в шифрованный текст (шифротекст). Традиционная криптография образует раздел симметричных криптосистем,
в которых зашифровывание и расшифровывание проводится с использованием одного и того же секретного ключа.
Шифрование — процесс нормального применения криптографического преобразования открытого текста на основе алгоритма и
 ключа, в результате которого возникает шифрованный текст.
Расшифровывание — процесс нормального применения криптографического преобразования шифрованного текста в открытый.
Распространённые алгоритмы шифрования: симметричные DES, AES, ГОСТ 28147-89, Camellia, Twofish, Blowfish, IDEA, RC4 и др.;
                                      асимметричные RSA и Elgamal (Эль-Гамаль);
                                      хеш-функций MD4, MD5, MD6, SHA-1, SHA-2, ГОСТ Р 34.11-2012 («Стрибог»).

Хэш - это строка битов фиксированной длины, которая процедурно и детерминированно генерируется из некоторого
произвольного блока исходных данных. Некоторые важные свойства этих хэшей (тип, полезный для криптографии) включают:

Фиксированная длина: это означает, что независимо от того, какой вводится, длина хеша одинакова. Например,
хэши SHA-256 всегда имеют длину 256 бит, независимо от того, составляют ли входные данные несколько бит или несколько гигабайт.

Детерминированный: для одного и того же ввода вы должны рассчитывать точно такой же хэш. Это делает хэши
полезными для контрольных сумм.

Устойчивость к коллизиям : коллизия возникает, когда один и тот же хэш генерируется для двух разных входных блоков
 данных. Алгоритмы хеширования разработаны таким образом, чтобы исключить вероятность возникновения коллизий -
 насколько маловероятно это свойство алгоритма хеширования. Важность этого свойства зависит от варианта использования.

Однонаправленный: хороший алгоритм хеширования легко применить, но его трудно отменить. Это означает, что с учетом
хэша нет разумного способа узнать, каковы были исходные данные.

Алгоритмы хеширования, которые работают с криптовалютой
Хеши, которые работают с криптографией, зависят от того, что поддерживает ваша версия OpenSSL. Если у вас достаточно
новая версия OpenSSL, вы можете получить список хеш-типов, поддерживаемых вашим OpenSSL, введя его openssl
list-message-digest-algorithmsв командной строке. Для более старых версий просто введите openssl
list-message-digest-commandsвместо этого!

Один из наиболее распространенных алгоритмов хеширования - SHA-256 . Старые популярные типы, такие как SHA-1
 или MD5, больше не являются безопасными и не должны использоваться.

Как рассчитать хеши с помощью криптографии
У Crypto есть метод, createHashкоторый позволяет вычислить хэш. Его единственный аргумент - строка, представляющая
    хеш. В этом примере выполняется поиск хэша SHA-256 для строки «Боже мой, я люблю узел!»:
    require("crypto")
      .createHash("sha256")
      .update("Man oh man do I love node!")
      .digest("hex");

updateМетод используется для передачи данных , чтобы позже быть превращены в хэш с digestметодом. updateможет быть
вызван несколько раз для приема потоковых данных, например буферов из потока чтения файлов. Аргумент для
digest представляет формат вывода и может быть двоичным, шестнадцатеричным или base64. По умолчанию используется
двоичный файл.

HMAC расшифровывается как Hash-based Message Authentication Code и представляет собой процесс применения
хеш-алгоритма как к данным, так и к секретному ключу, что приводит к единому окончательному хешу. Его
использование похоже на использование ванильного хэша, но также позволяет проверять подлинность данных, а
также целостность указанных данных (как вы можете использовать контрольные суммы SHA-256).

API для hmacs очень похож на API, за createHash исключением того, что вызывается метод, createHmacи он принимает
 ключ в качестве второго аргумента:
require("crypto").createHmac("sha256", "password")
  .update("If you love node so much why don't you marry it?")
  .digest("hex");
  Результирующий хэш SHA-256 уникален как для входных данных, так и для ключа.

  Шифры
  Шифры позволяют кодировать и декодировать сообщения по паролю.

  Шифровальные алгоритмы, работающие с криптографией
  Как и алгоритмы хеширования криптографии, шифры, которые работают с криптографией, зависят от того, что поддерживает ваша версия OpenSSL. Вы можете получить список типов хэшей, поддерживаемых вашим OpenSSL, введя openssl list-cipher-commandsв командной строке для более старых версий или openssl list-cipher-algorithmsдля более новых версий OpenSSL. OpenSSL поддерживает множество шифров; Хороший и популярный - AES_256 .

  Как использовать алгоритмы шифрования с криптовалютой:
  Crypto имеет два метода шифрования и дешифрования:

  crypto.createCipheriv(algorithm, key, iv)
  crypto.createDecipheriv(algorithm, key, iv)
  Оба эти метода принимают аргументы аналогично createHmac. У них обоих аналогичные updateфункции. Однако каждое
  использование updateвозвращает фрагмент закодированных / декодированных данных вместо того, чтобы вызывать его
   digestдля получения результата. Более того, после кодирования (или декодирования) ваших данных вам, вероятно,
   придется вызвать finalметод, чтобы получить последний фрагмент закодированной информации.

  Еще одно важное дополнение в методе шифрования - вектор инициализацииiv or . Векторы инициализации должны быть
  непредсказуемыми и уникальными, обычно требуется, чтобы они были случайными или псевдослучайными. Рандомизация
  имеет решающее значение для схем шифрования для достижения семантической безопасности, свойства, посредством
  которого повторное использование схемы с одним и тем же ключом не позволяет злоумышленнику сделать вывод о
  взаимосвязях между сегментами зашифрованного сообщения.

  Вот пример, немного менее тривиальный, чем предыдущие примеры, который использует криптовалюту и yargs для
  кодирования и декодирования сообщений из командной строки:
